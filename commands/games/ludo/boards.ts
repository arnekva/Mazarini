import { LudoColor, LudoPiece } from './ludo'

export namespace LudoBoard {
    export const board = (pieces: LudoPiece[]) => {
        const emojiArray = [
            ['â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›'],
            ['â¬›', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'â¬œ', 'â¬œ', 'â¬œ', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'â¬›'],
            ['â¬›', 'ðŸŸ¨', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'ðŸŸ¨', 'â¬œ', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'ðŸŸ©', 'â¬›'],
            ['â¬›', 'ðŸŸ¨', 'â¬›', 'â¬œ', 'â¬›', 'â¬œ', 'â¬›', 'ðŸŸ¨', 'â¬œ', 'ðŸŸ©', 'â¬œ', 'ðŸŸ©', 'â¬›', 'â¬œ', 'â¬›', 'â¬œ', 'â¬›', 'ðŸŸ©', 'â¬›'],
            ['â¬›', 'ðŸŸ¨', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'ðŸŸ¨', 'â¬œ', 'ðŸŸ©', 'â¬œ', 'ðŸŸ©', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'ðŸŸ©', 'â¬›'],
            ['â¬›', 'ðŸŸ¨', 'â¬›', 'â¬œ', 'â¬›', 'â¬œ', 'â¬›', 'ðŸŸ¨', 'â¬œ', 'ðŸŸ©', 'â¬œ', 'ðŸŸ©', 'â¬›', 'â¬œ', 'â¬›', 'â¬œ', 'â¬›', 'ðŸŸ©', 'â¬›'],
            ['â¬›', 'ðŸŸ¨', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'ðŸŸ¨', 'â¬œ', 'ðŸŸ©', 'â¬œ', 'ðŸŸ©', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'ðŸŸ©', 'â¬›'],
            ['â¬›', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'â¬›', 'ðŸŸ©', 'â¬›', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'ðŸŸ©', 'â¬›'],
            ['â¬›', 'â¬œ', 'ðŸŸ¨', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬›'],
            ['â¬›', 'â¬œ', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'ðŸŸ¨', 'â¬›', 'â¬›', 'â¬›', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'â¬œ', 'â¬›'],
            ['â¬›', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬œ', 'â¬œ', 'â¬œ', 'â¬œ', 'ðŸŸ¦', 'â¬œ', 'â¬›'],
            ['â¬›', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'â¬›', 'ðŸŸ¥', 'â¬›', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'â¬›'],
            ['â¬›', 'ðŸŸ¥', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'ðŸŸ¥', 'â¬œ', 'ðŸŸ¥', 'â¬œ', 'ðŸŸ¦', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'ðŸŸ¦', 'â¬›'],
            ['â¬›', 'ðŸŸ¥', 'â¬›', 'ðŸŸ¥', 'â¬›', 'ðŸŸ¥', 'â¬›', 'ðŸŸ¥', 'â¬œ', 'ðŸŸ¥', 'â¬œ', 'ðŸŸ¦', 'â¬›', 'ðŸŸ¦', 'â¬›', 'ðŸŸ¦', 'â¬›', 'ðŸŸ¦', 'â¬›'],
            ['â¬›', 'ðŸŸ¥', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'ðŸŸ¥', 'â¬œ', 'ðŸŸ¥', 'â¬œ', 'ðŸŸ¦', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'ðŸŸ¦', 'â¬›'],
            ['â¬›', 'ðŸŸ¥', 'â¬›', 'ðŸŸ¥', 'â¬›', 'ðŸŸ¥', 'â¬›', 'ðŸŸ¥', 'â¬œ', 'ðŸŸ¥', 'â¬œ', 'ðŸŸ¦', 'â¬›', 'ðŸŸ¦', 'â¬›', 'ðŸŸ¦', 'â¬›', 'ðŸŸ¦', 'â¬›'],
            ['â¬›', 'ðŸŸ¥', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'â¬œ', 'ðŸŸ¦', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'ðŸŸ¦', 'â¬›'],
            ['â¬›', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'ðŸŸ¥', 'â¬œ', 'â¬œ', 'â¬œ', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'ðŸŸ¦', 'â¬›'],
            ['â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›', 'â¬›'],
        ]

        pieces.forEach((piece) => {
            const pos = LudoBoard.indexMap[piece.positionIndex]
            emojiArray[pos[0]][pos[1]] = LudoBoard.findSquare(piece.color)
        })

        return {
            board1: emojiArray
                .slice(0, 8)
                .map((row) => row.join(''))
                .join('\n'),
            board2: emojiArray
                .slice(8, 11)
                .map((row) => row.join(''))
                .join('\n'),
            board3: emojiArray
                .slice(11)
                .map((row) => row.join(''))
                .join('\n'),
        }
    }

    export const findSquare = (c: LudoColor) => {
        if (c === 'red') return 'ðŸŸ¥'
        if (c === 'blue') return 'ðŸŸ¦'
        if (c === 'green') return 'ðŸŸ©'
        if (c === 'yellow') return 'ðŸŸ¨'
    }

    export const indexMap = {
        0: [1, 8],
        1: [1, 9],
        2: [1, 10],
        3: [2, 10],
        4: [3, 10],
        5: [4, 10],
        6: [5, 10],

        //100 = Yellow
        100: [3, 3],
        101: [3, 5],
        102: [5, 3],
        103: [5, 5],

        //200 = Green
        200: [3, 13],
        201: [3, 15],
        202: [5, 13],
        203: [5, 15],
    }
}
